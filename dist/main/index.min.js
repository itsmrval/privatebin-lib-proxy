"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("pako"),e=require("axios"),a=require("isomorphic-webcrypto"),s=require("byte-base64");function n(t){return t&&"object"==typeof t&&"default"in t?t:{default:t}}var r=n(t),i=n(e),o=n(a);function u(t){return o.default.subtle.importKey("raw",t,"PBKDF2",!1,["deriveBits","deriveKey"])}function c(t,e,a,s){return o.default.subtle.deriveKey({name:"PBKDF2",salt:e,iterations:a,hash:"SHA-256"},t,{name:"AES-GCM",length:s},!1,["encrypt","decrypt"])}function d(t){return(new TextEncoder).encode(t)}async function p(t,e,a){const{burnafterreading:n,opendiscussion:i,compression:p,textformat:f}=a,l={algo:"aes",mode:"gcm",ks:256,ts:128,iter:1e5,textformat:f,compression:p,burnafterreading:n,opendiscussion:i};let y=d(JSON.stringify({paste:t}));return"zlib"===p&&(y=r.default.deflateRaw(y)),async function(t,e,a){const n=await u(e),r=o.default.getRandomValues(new Uint8Array(16)),i=o.default.getRandomValues(new Uint8Array(8)),p=await c(n,i,a.iter,a.ks),f=[[s.bytesToBase64(r),s.bytesToBase64(i),a.iter,a.ks,a.ts,a.algo,a.mode,a.compression],a.textformat,a.opendiscussion,a.burnafterreading],l=await o.default.subtle.encrypt({name:"AES-GCM",iv:r,additionalData:d(JSON.stringify(f)),tagLength:a.ts},p,t);return{ct:s.bytesToBase64(new Uint8Array(l)),adata:f}}(y,e,l)}async function f(t,e,a){const n=await async function(t,e,a){const n=s.base64ToBytes(t),r=a[0],i=s.base64ToBytes(r[0]),p=s.base64ToBytes(r[1]),f=r[2],l=r[4],y=await u(e),g=await c(y,p,f,256),b=await o.default.subtle.decrypt({name:"AES-GCM",iv:i,additionalData:d(JSON.stringify(a)),tagLength:l},g,n);return new Uint8Array(b)}(t,e,a);return"zlib"===a[0][7]?JSON.parse(r.default.inflateRaw(n,{to:"string"})):JSON.parse(function(t){return(new TextDecoder).decode(t)}(n))}exports.PrivatebinClient=class extends class{constructor(t){this.axios=i.default.create(t)}get(t,e){return this.axios.get(t,e)}post(t,e,a){return this.axios.post(t,e,a)}success(t){return t.data}}{constructor(t="https://privatebin.net"){super({baseURL:t,headers:{common:{"Content-Type":"application/json","X-Requested-With":"JSONHttpRequest"}}})}async sendText(t,e,a){const s=await p(t,e,a);return this.postPaste(s,a)}async getText(t,e){const{status:a,message:s,ct:n,adata:r}=await this.getPaste(t);if(0==a)return f(n,e,r);throw new Error(s)}getPaste(t){return this.get(`/?pasteid=${t}`).then(this.success)}postPaste(t,e){const{expire:a}=e,{ct:s,adata:n}=t;return this.post("/",{v:2,ct:s,adata:n,meta:{expire:a}}).then(this.success)}},exports.decryptText=f,exports.encryptText=p;
//# sourceMappingURL=index.min.js.map
