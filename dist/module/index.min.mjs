import t from"pako";import e from"axios";import a from"isomorphic-webcrypto";import{bytesToBase64 as s,base64ToBytes as n}from"byte-base64";function r(t){return a.subtle.importKey("raw",t,"PBKDF2",!1,["deriveBits","deriveKey"])}function i(t,e,s,n){return a.subtle.deriveKey({name:"PBKDF2",salt:e,iterations:s,hash:"SHA-256"},t,{name:"AES-GCM",length:n},!1,["encrypt","decrypt"])}function o(t){return(new TextEncoder).encode(t)}async function c(e,n,c){const{burnafterreading:u,opendiscussion:p,compression:d,textformat:m}=c,f={algo:"aes",mode:"gcm",ks:256,ts:128,iter:1e5,textformat:m,compression:d,burnafterreading:u,opendiscussion:p};let g=o(JSON.stringify({paste:e}));return"zlib"===d&&(g=t.deflateRaw(g)),async function(t,e,n){const c=await r(e),u=a.getRandomValues(new Uint8Array(16)),p=a.getRandomValues(new Uint8Array(8)),d=await i(c,p,n.iter,n.ks),m=[[s(u),s(p),n.iter,n.ks,n.ts,n.algo,n.mode,n.compression],n.textformat,n.opendiscussion,n.burnafterreading],f=await a.subtle.encrypt({name:"AES-GCM",iv:u,additionalData:o(JSON.stringify(m)),tagLength:n.ts},d,t);return{ct:s(new Uint8Array(f)),adata:m}}(g,n,f)}async function u(e,s,c){const u=await async function(t,e,s){const c=n(t),u=s[0],p=n(u[0]),d=n(u[1]),m=u[2],f=u[4],g=await r(e),y=await i(g,d,m,256),h=await a.subtle.decrypt({name:"AES-GCM",iv:p,additionalData:o(JSON.stringify(s)),tagLength:f},y,c);return new Uint8Array(h)}(e,s,c);return"zlib"===c[0][7]?JSON.parse(t.inflateRaw(u,{to:"string"})):JSON.parse(function(t){return(new TextDecoder).decode(t)}(u))}class p extends class{constructor(t){this.axios=e.create(t)}get(t,e){return this.axios.get(t,e)}post(t,e,a){return this.axios.post(t,e,a)}success(t){return t.data}}{constructor(t="https://privatebin.net"){super({baseURL:t,headers:{common:{"Content-Type":"application/json","X-Requested-With":"JSONHttpRequest"}}})}async sendText(t,e,a){const s=await c(t,e,a);return this.postPaste(s,a)}async getText(t,e){const{status:a,message:s,ct:n,adata:r}=await this.getPaste(t);if(0==a)return u(n,e,r);throw new Error(s)}getPaste(t){return this.get(`/?pasteid=${t}`).then(this.success)}postPaste(t,e){const{expire:a}=e,{ct:s,adata:n}=t;return this.post("/",{v:2,ct:s,adata:n,meta:{expire:a}}).then(this.success)}}export{p as PrivatebinClient,u as decryptText,c as encryptText};
//# sourceMappingURL=index.min.mjs.map
